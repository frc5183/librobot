plugins {
    id 'java'
    id 'maven-publish'
    id "edu.wpi.first.GradleRIO" version "2024.3.1"
}

group = 'net.frc5183.librobot'
def releaseVersion = "2024.1.0"

version = releaseVersion
if (System.getenv("LIBROBOT_VERSION") != null)
    if (!System.getenv("LIBROBOT_VERSION").isEmpty())
        version = System.getenv("LIBROBOT_VERSION")

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/frc5183/librobot"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = "librobot"
            version = version

            from components.java
        }
    }
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.jetbrains:annotations:25.0.0"

    compileOnly wpi.java.deps.wpilib()
    compileOnly wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    testImplementation wpi.java.deps.wpilib()
    testImplementation wpi.java.vendor.java()
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
